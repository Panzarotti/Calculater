package com.scottrealapps.calculater;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.CheckBoxPreference;
import android.preference.ListPreference;
import android.preference.Preference;
import android.preference.PreferenceActivity;
import android.preference.PreferenceScreen;
import android.support.v4.app.NavUtils;
import android.support.v7.app.ActionBar;
import android.preference.PreferenceFragment;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.MenuItem;

import java.util.ArrayList;

/**
 * This was mostly generated by Android Studio.
 * <p>
 * A {@link PreferenceActivity} that presents a set of application settings. On
 * handset devices, settings are presented as a single list. On tablets,
 * settings are split by category, with category headers shown to the left of
 * the list of settings.
 * <p>
 * See <a href="http://developer.android.com/design/patterns/settings.html">
 * Android Design: Settings</a> for design guidelines and the <a
 * href="http://developer.android.com/guide/topics/ui/settings.html">Settings
 * API Guide</a> for more information on developing a Settings UI.
 */
public class TileSettingsActivity extends AppCompatPreferenceActivity {
    public static final String KEY_PREF_SPEED_TYPE = "pref_speedType";
    public static final String KEY_PREF_PLAYER_CONTROL_SPEED = "pref_playerControlSpeed";
    public static final String KEY_PREF_TIME_TILES = "pref_timeTiles";
    public static final String KEY_PREF_TIME_ALLOWED = "pref_timeAllowed";

    /**
     * Generated by Android Studio.
     *
     * A preference value change listener that updates the preference's summary
     * to reflect its new value.
     *
     * We added the code to show/hide preference categories.
     *
     * ARGHH why is this code in our app instead of some Android library?!
     */
    private static class OurPreferenceChangeListener implements Preference.OnPreferenceChangeListener {
        private PreferenceScreen preferenceScreen;
        private ArrayList<Preference> timeTilesOnPrefs = new ArrayList<>();
        private ArrayList<Preference> timeTilesOffPrefs = new ArrayList<>();

        public OurPreferenceChangeListener(PreferenceScreen ps) {
            this.preferenceScreen = ps;
        }

        @Override
        public boolean onPreferenceChange(Preference preference, Object value) {
            String stringValue = value.toString();

            if (preference instanceof ListPreference) {
                // For list preferences, look up the correct display value in
                // the preference's 'entries' list.
                ListPreference listPreference = (ListPreference) preference;
                int index = listPreference.findIndexOfValue(stringValue);

                // Set the summary to reflect the new value.
                preference.setSummary(
                        index >= 0
                                ? listPreference.getEntries()[index]
                                : null);
//            } else if (preference instanceof RingtonePreference) {
//                // For ringtone preferences, look up the correct display value
//                // using RingtoneManager.
//                if (TextUtils.isEmpty(stringValue)) {
//                    // Empty values correspond to 'silent' (no ringtone).
//                    preference.setSummary(R.string.pref_ringtone_silent);
//
//                } else {
//                    Ringtone ringtone = RingtoneManager.getRingtone(
//                            preference.getContext(), Uri.parse(stringValue));
//
//                    if (ringtone == null) {
//                        // Clear the summary if there was a lookup error.
//                        preference.setSummary(null);
//                    } else {
//                        // Set the summary to reflect the new ringtone display
//                        // name.
//                        String name = ringtone.getTitle(preference.getContext());
//                        preference.setSummary(name);
//                    }
//                }
//
            } else if (preference instanceof CheckBoxPreference) {
                //  do nothing
            } else {
                // For all other preferences, set the summary to the value's
                // simple string representation.
                preference.setSummary(stringValue);
            }

            //  Show/hide categories in here?
            if (preference.getKey().equals(KEY_PREF_TIME_TILES)) {
                if (((Boolean)value).booleanValue()) {
                    //  it's true, hide the non-time-tile preferences.
                    for (Preference tp : timeTilesOffPrefs) {
                        preferenceScreen.removePreference(tp);
                    }
                    for (Preference tp : timeTilesOnPrefs) {
                        preferenceScreen.addPreference(tp);
                    }
                } else {
                    //  it's false; show the non-time-tile preferences.
                    for (Preference tp : timeTilesOnPrefs) {
                        preferenceScreen.removePreference(tp);
                    }
                    for (Preference tp : timeTilesOffPrefs) {
                        preferenceScreen.addPreference(tp);
                    }
                }
            }

            return true;
        }

        /**
         * Add this Preference to the list of prefs which get shown only when
         * timed tiles are selected.
         *
         * @param pref should not be null.
         */
        public void addTimeTilesOnPref(Preference pref) {
            timeTilesOnPrefs.add(pref);
        }

        /**
         * Add this Preference to the list of prefs which get shown only when
         * normal (non-timed) tiles are selected.
         *
         * @param pref should not be null.
         */
        public void addTimeTilesOffPref(Preference pref) {
            timeTilesOffPrefs.add(pref);
        }
    };

//    /**
//     * Helper method to determine if the device has an extra-large screen. For
//     * example, 10" tablets are extra-large.
//     */
//    private static boolean isXLargeTablet(Context context) {
//        return (context.getResources().getConfiguration().screenLayout
//                & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;
//    }

    /**
     * Generated by Android Studio.
     *
     * Binds a preference's summary to its value. More specifically, when the
     * preference's value is changed, its summary (line of text below the
     * preference title) is updated to reflect the value. The summary is also
     * immediately updated upon calling this method. The exact display format is
     * dependent on the type of preference.
     *
     * @see OurPreferenceChangeListener
     */
    private static void bindPreferenceSummaryToValue(OurPreferenceChangeListener pcl, Preference preference) {
        // Set the listener to watch for value changes.
        preference.setOnPreferenceChangeListener(pcl);

        // Trigger the listener immediately with the preference's
        // current value.
        manuallyTriggerPreferenceChange(pcl, preference);
    }

    private static void manuallyTriggerPreferenceChange(OurPreferenceChangeListener pcl,
                                                 Preference preference) {
        Object value = null;
        if (preference instanceof CheckBoxPreference) {
            value = PreferenceManager
                    .getDefaultSharedPreferences(preference.getContext())
                    .getBoolean(preference.getKey(), false);
        } else {
            value = PreferenceManager
                    .getDefaultSharedPreferences(preference.getContext())
                    .getString(preference.getKey(), "");
        }
        pcl.onPreferenceChange(preference, value);
    }

    /**
     * Generated by Android Studio.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Display the fragment as the main content.
        getFragmentManager().beginTransaction()
                .replace(android.R.id.content, new TileSettingsFragment())
                .commit();
        setupActionBar();
    }

    /**
     * Generated by Android Studio.
     *
     * Set up the {@link android.app.ActionBar}, if the API is available.
     */
    private void setupActionBar() {
        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            // Show the Up button in the action bar.
            actionBar.setDisplayHomeAsUpEnabled(true);
        }
    }

//    /**
//     * {@inheritDoc}
//     */
//    @Override
//    public boolean onIsMultiPane() {
//        return isXLargeTablet(this);
//    }

//    /**
//     * {@inheritDoc}
//     */
//    @Override
//    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
//    public void onBuildHeaders(List<Header> target) {
//        loadHeadersFromResource(R.xml.pref_headers, target);
//    }

//    /**
//     * This method stops fragment injection in malicious applications.
//     * Make sure to deny any unknown fragments here.
//     */
//    protected boolean isValidFragment(String fragmentName) {
//        return PreferenceFragment.class.getName().equals(fragmentName)
//                || GeneralPreferenceFragment.class.getName().equals(fragmentName)
//                || DataSyncPreferenceFragment.class.getName().equals(fragmentName)
//                || NotificationPreferenceFragment.class.getName().equals(fragmentName);
//    }

    /**
     * Generated by Android Studio.
     */
    public static class TileSettingsFragment extends PreferenceFragment {
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            // Load the preferences from an XML resource
            addPreferencesFromResource(R.xml.tile_preferences);

            OurPreferenceChangeListener opcl = new OurPreferenceChangeListener(getPreferenceScreen());

            //  ARGHH
//            // Bind the summaries of EditText/List/Dialog/Ringtone preferences
//            // to their values. When their values change, their summaries are
//            // updated to reflect the new value, per the Android Design
//            // guidelines.
            SharedPreferences prefs = getPreferenceManager().getSharedPreferences();
            for (String prefKey : prefs.getAll().keySet()) {
                Preference pref = findPreference(prefKey);
                if (pref != null) {
                    bindPreferenceSummaryToValue(opcl, pref);
                }
                //  horrible hard-coding
                if (prefKey.equals("pref_timeAllowed")) {
                    opcl.addTimeTilesOnPref(pref);
                    //  so we don't get two copies added
                    getPreferenceScreen().removePreference(pref);
                } else if (prefKey.equals("pref_speedType") ||
                           prefKey.equals("pref_playerControlSpeed")) {
                    opcl.addTimeTilesOffPref(pref);
                    //  so we don't get two copies added
                    getPreferenceScreen().removePreference(pref);
                }
            }
            //  After all that, we need to pretend our Time Tiles checkbox was
            //  just checked in order to get the right components to show up.
            manuallyTriggerPreferenceChange(opcl, findPreference("pref_timeTiles"));
        }
    }

    /**
     * Half of getting our action-bar-back-arrow to work; this is from
     * https://stackoverflow.com/questions/33940882/android-fragment-go-back-does-doesnt-work
     * (the other half is in AndroidManifest.xml)
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Respond to the action bar's Up/Home button
        if (item.getItemId() == android.R.id.home) {
            NavUtils.navigateUpFromSameTask(this);
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}
